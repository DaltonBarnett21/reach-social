import React from "react";
import Head from "next/head";
import Layout from "../../components/layout/Layout";
import Image from "next/image";
import Post from "../../components/post/Post";
import LocationOnOutlinedIcon from "@mui/icons-material/LocationOnOutlined";
import EmailOutlinedIcon from "@mui/icons-material/EmailOutlined";
import { useRouter } from "next/router";
import { useQueryClient, useMutation, useQuery } from "@tanstack/react-query";
import { makeRequest } from "../../lib/axios";
import { useContext, useState } from "react";
import { AuthContext } from "../../context/authContext";
import UpdateProfile from "../../components/updateProfile/UpdateProfile";

const Profile = () => {
  const router = useRouter();
  const [openProfileModel, setOpenProfileModel] = useState(false);
  const { currentUser } = useContext(AuthContext);
  const userId = Number(router.asPath.split("/")[2]);
  const queryClient = useQueryClient();

  //get user profile info
  const { isLoading, error, data } = useQuery(["userProfile", userId], () =>
    makeRequest.get(`/user/${userId}`).then((res) => {
      return res.data;
    })
  );

  //get posts only belonging to user
  const {
    isLoading: postIsLoading,
    error: profilePostsError,
    data: profilePosts,
  } = useQuery(["profilePosts"], async () => {
    const res = await makeRequest.get(`/post?userId=${userId}`);
    return res.data;
  });

  const { isLoading: rIsLoading, data: relationshipData } = useQuery(
    ["relationship"],
    () =>
      makeRequest.get("/relationship/" + userId).then((res) => {
        return res.data;
      })
  );

  const relationshipMutation = useMutation(
    (isFollowing) => {
      if (isFollowing)
        return makeRequest.delete(`/relationship?userId=${userId}`);
      return makeRequest.post(`/relationship?userId=${userId}`);
    },
    {
      onSuccess: () => {
        // Invalidate and refetch
        queryClient.invalidateQueries(["relationship"]);
      },
    }
  );

  const handleFollow = () => {
    console.log(relationshipData);
    relationshipMutation.mutate(relationshipData.includes(currentUser.id));
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="relative">
          <div className="relative flex justify-center">
            <Image
              src={
                data?.coverpic ? `/uploads/${data?.coverpic}` : "/no-image.png"
              }
              alt="cover image"
              className=" h-96 w-full object-cover"
              height={100}
              width={1200}
            />
            <Image
              src={
                data?.profilepic
                  ? `/uploads/${data?.profilepic}`
                  : "/no-avatar.png"
              }
              className=" h-40 w-40 object-cover rounded-full absolute -bottom-20  border-4 border-white"
              alt="profile image"
              height={100}
              width={100}
            />
          </div>

          <div className=" bg-white mt-5 shadow-md p-8 flex flex-col justify-center items-center">
            <h2 className="mt-8 text-xl font-semibold">{data?.name}</h2>
            <p className="mt-5 max-w-3xl text-center">{data?.about}</p>
            <div className="flex mb-4 mt-4">
              <LocationOnOutlinedIcon className="mr-1" />
              {data?.city && <p>{data?.city}</p>}
              {!data?.city && <p>No Location</p>}
            </div>

            {currentUser.id !== userId && (
              <div className="flex mb-4 cursor-pointer ">
                <EmailOutlinedIcon className="mr-1" />
                <p>Message</p>
              </div>
            )}

            {currentUser.id === userId ? (
              <button
                onClick={() => setOpenProfileModel(!openProfileModel)}
                className=" bg-blue-400 w-32 p-2 rounded-md text-white hover:bg-blue-500 "
              >
                Update Profile
              </button>
            ) : (
              <button
                onClick={handleFollow}
                className=" bg-blue-400 w-32 p-2 rounded-md text-white hover:bg-blue-500 "
              >
                {relationshipData?.includes(currentUser.id) ? (
                  <span>Following</span>
                ) : (
                  <span>Follow</span>
                )}
              </button>
            )}
            {openProfileModel && (
              <UpdateProfile
                openProfileModel={openProfileModel}
                setOpenProfileModel={setOpenProfileModel}
                currentUser={currentUser}
              />
            )}
          </div>
          {postIsLoading ? (
            <p>LOADING...</p>
          ) : profilePostsError ? (
            <p>ERROR...</p>
          ) : (
            profilePosts.map((p) => <Post key={p.id} postdata={p} />)
          )}
        </div>
      </Layout>
    </>
  );
};

export default Profile;
